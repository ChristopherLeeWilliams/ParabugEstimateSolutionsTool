  <!DOCTYPE html>
  <html>
    <head>
      <title>Parabug Estimate Solution Tool</title>
      <meta name="viewport" content="initial-scale=1.0">
      <meta charset="utf-8">
      <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCSPyVTS3rqfQQ294LN6qbOoZ2j_KsjaEQ&callback=initMap&libraries=drawing,places" defer> </script>
      <style>
        html {
          height: 100%;
          margin: 0px;
          padding: 0px;
        }
        
        body {
          height: 100%;
          margin: 0px;
          padding: 0px;
          display: grid;
          grid-template-rows: 80%;
        }
        
        .map-container {
          padding: 15px;
        }
        
        .sidebar {
          padding: 10px;
        }
        
        /* Move reset button above google logo */
        #reset-btn {
          position: absolute;
          margin-left: -72px;
          margin-bottom: 85px;
        }
        
        /* Move center button above google logo */
        #center-btn {
          position: absolute;
          margin-left: -76px;
          margin-bottom: 25px;
        }
        
        #map {
          height: 100%;
          border: 2px solid black;
        }
        
        #pac-input {
          background-color: #fff;
          font-family: Roboto;
          font-size: 15px;
          font-weight: 300;
          margin-left: 10px;
          margin-top: 10px;
          padding: 0 11px 0 13px;
          text-overflow: ellipsis;
          width: 15%;
          line-height: 32px;
          border:'2px solid #fff';
        }
        
        #pac-input:focus {
          border-color: #4d90fe;
        }
        
        #mode-control-container {
          display: grid;
          grid-template-columns: 30% 70%;
          grid-template-rows: 100%;
        }
        
        #additional-info {
          font-family: Roboto;
          font-size: 15px;
          font-weight: 400;
          line-height: 32px;
        }
        
        #stat-display {
          text-align: center;
          margin: -11px 15px 0px 15px;
          padding: 10px 0px 10px 0px;
          /*background-color: grey;*/
        }
        
        .stat-item {
          display: inline-block;
        }
        
        .stat-text {
          display: inline-block;
          min-width: 80px;
          margin: 5px;
        }
        
        .stat-input {
          display: inline-block;
          min-width: 140px;
          margin: 5px;
        }
        
        /* Read only inputs */
        .read-only {
          background-color: lightgrey;
        }
        
        #user-info-display {
          margin: 0px 15px 0px 15px;
          padding: 10px;
          /*background-color: lightblue;*/
          text-align: center;
        }
        
        #user-info-display>h2 {
          margin-bottom: 5px;
        }
        
        .form-element {
          margin-top: 10px;
        }
        
        .form-text {
          display: inline-block;
          min-width: 120px;
          /*text-align: right;*/
          /*margin-right: 10px;*/
        }
        
        .form-input {
          display: inline-block;
          line-height: 40px;
        }
        
        .align-input {
            display: inline-block;
            text-align: left;
        }
      </style>
    </head>
    <body>
      <div class="map-container">
        <input id="pac-input" class="controls" type="text" placeholder="Search...">
        <div id="map"></div>
      </div>
    </body>
    <form id="additional-info" method="POST" action="/">
      <div id="stat-display">
        <!--Bugs Per Acre-->
        <div class="stat-item">
          <div class="stat-text">Bugs / Acre:</div>
          <div class="stat-input"><input type="number" name="bugs-per-acre" id="num-bugs-per-acre" min="1" value="10000" required/></div>
        </div>
        <!--Variable Rate Multiplier-->
        <div class="stat-item">
          <div class="stat-text">Variable Rate:</div>
          <div class="stat-input"><input type="number" name="percent-multiplier" id="percent-multiplier" value="100" min="1" required/>%</div>
        </div>
        <!--Estimated Number of Acres-->
        <div class="stat-item">
          <div class="stat-text">Acres:</div>
          <div class="stat-input"><input type="number" name="num-acres" id="num-acres" class="read-only" value="0" readonly/></div>
        </div>
        <!--Estimated Total Bugs-->
        <div class="stat-item">
          <div class="stat-text">Total Bugs:</div>
          <div class="stat-input"><input type="number" name="num-bugs" id="num-bugs" class="read-only" value="0" readonly/></div>
        </div>
      </div>
      
      <div id="user-info-display">
        <h2>User Information</h2>
        <div class="align-input">
          <!--Contact Name-->
          <div class="form-element">
            <div class="form-text">Contact Name:</div>
            <div class="form-input"><input type="text" name="contact-name" id="contact-name"  size="60" required/></div>
          </div>
          <!--Contact Phone-->
          <div class="form-element">
            <div class="form-text">Contact Phone:</div>
            <div class="form-input"><input type="text" name="contact-phone" id="contact-phone"  size="60" required/></div>
          </div>
          <!--Contact Email-->
          <div class="form-element">
            <div class="form-text">Contact Email:</div>
            <div class="form-input"><input type="text" name="contact-email" id="contact-email"  size="60" required/></div>
          </div>
          <!--Billing Address-->
          <div class="form-element">
            <div class="form-text">Billing Address:</div>
            <div class="form-input"><input type="text" name="billing-address" id="billing-address"  size="60" required/></div>
          </div>
          <!--Crop-->
          <div class="form-element">
            <div class="form-text">Crop:</div>
            <div class="form-input"><input type="text" name="crop" id="crop"  size="60" required/></div>
          </div>
          <!--Row Spacing-->
          <div class="form-element">
            <div class="form-text">Row Spacing (ft):</div>
            <div class="form-input"><input type="number" name="row-spacing" id="row-spacing" required/></div>
          </div>
        </div>
        <div class="form-element">
          <div class="form-input"><input type="submit" value="Submit Request"></div>
        </div>
      </div>
    </form>
  </html>
  
  
  <script type="text/javascript" src="/js/jsts.1.6.1.js"></script>
  <!--<script src="https://cdn.rawgit.com/bjornharrtell/jsts/gh-pages/1.6.0/jsts.min.js"></script>-->
  <!--<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCSPyVTS3rqfQQ294LN6qbOoZ2j_KsjaEQ&callback=initMap&libraries=drawing,places" async defer> </script>-->
  
  <script type="text/javascript" src="/js/classes.js"></script>
  <script>
    // GLOBAL VARIABLES
    var map;
    var drawingManager;
    var appArea;
    
    // Internal object to help manage toggling between our custom
    //  drawing modes
    var drawModeControl = {
      modes: ['Drag', 'Application Area', 'Hazard', 'Variable Rate Area'],
      current: 0,
      getCurrent: function(){ return this.modes[this.current]; }
    };
    
    function initMap() {
      map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: 36.677756, lng: -121.729448},
        zoom: 15,
        mapTypeId: 'satellite',
        streetViewControl: false,
        rotateControl: false,
        scaleControl: true,
        mapTypeControlOptions: {
          style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,
        }
      });
      drawingManager = new google.maps.drawing.DrawingManager({
        drawingMode: null,
        drawingControl: false,
        map: map,
        polygonOptions: { editable: true }
      });
      google.maps.event.addListener(drawingManager, 'polygoncomplete', function(p) {
        draw(p.getPath());
        p.setMap(null);
        path = null;
      });
      map.setTilt(0);
      //************************************* Search Box *************************************
      // Create the search box and link it to the UI element.
      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
      
      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function() {
        searchBox.setBounds(map.getBounds());
      });
      
      // Listen for the event fired when the user selects a prediction
      searchBox.addListener('places_changed', function() {
        var places = searchBox.getPlaces();
        if (places.length == 0) { return; }
        
        // For each place, get the location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function(place) {
          if (!place.geometry) { console.log("Returned place contains no geometry"); return; }
          
          // Only geocodes have viewport
          if (place.geometry.viewport) { bounds.union(place.geometry.viewport); } 
          else { bounds.extend(place.geometry.location); }
        });
        map.fitBounds(bounds);
        map.setTilt(0);
      });
      //*********************************** End search Box ***********************************
      
      
      //*********************************** Custom Controls***********************************
      //https://developers.google.com/maps/documentation/javascript/examples/control-custom
      function MapModeControl(divHolder) {
        // Set CSS for the control border.
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = '#fff';
        controlUI.style.border = '2px solid #fff';
        controlUI.style.borderRadius = '3px';
        controlUI.style.cursor = 'pointer';
        controlUI.style.marginTop = '10px';
        controlUI.style.padding = '2px';
        controlUI.title = 'Select Control Mode';
        controlUI.id = "mode-control-container";
        
        var modeText = document.createElement('div');
        modeText.innerHTML = 'Mode: ';
        modeText.style.color = 'rgb(25,25,25)';
        modeText.style.fontFamily = 'Roboto,Arial,sans-serif';
        modeText.style.fontSize = '15px';
        modeText.style.lineHeight = '30px';
        modeText.style.marginRight = '10px';
        modeText.style.fontWeight = '600';
        
        // Interior
        var modeSelect = document.createElement('select');
        modeSelect.style.color = 'rgb(25,25,25)';
        modeSelect.style.fontFamily = 'Roboto,Arial,sans-serif';
        modeSelect.style.fontSize = '15px';
        modeSelect.style.lineHeight = '30px';
        
        var mode;
        for(var i = 0; i < drawModeControl.modes.length; i++) {
          mode = document.createElement('option');
          mode.value = i;
          mode.text = drawModeControl.modes[i];
          modeSelect.appendChild(mode);
        }
        modeSelect.addEventListener('change', function() {
          var index = modeSelect.selectedIndex;
          var value = modeSelect.options[index].value;
          drawToggle(value);
        });
        
        controlUI.appendChild(modeText);
        controlUI.appendChild(modeSelect);
        divHolder.appendChild(controlUI);
      }
      
      var modeSelectionDiv = document.createElement('div');
      MapModeControl(modeSelectionDiv);
      modeSelectionDiv.index = 1;
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelectionDiv);
      
      function CenterControl(divHolder) {
        // Set CSS for the control border.
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = '#fff';
        controlUI.style.border = '2px solid #fff';
        controlUI.style.borderRadius = '3px';
        controlUI.style.cursor = 'pointer';
        controlUI.style.margin = '10px';
        controlUI.title = 'Center Map on Application Area';
        controlUI.style.padding = "2px";
        controlUI.style.textAlign = 'center';
        
        var modeText = document.createElement('div');
        modeText.innerHTML = 'Center';
        modeText.style.color = 'rgb(25,25,25)';
        modeText.style.fontFamily = 'Roboto,Arial,sans-serif';
        modeText.style.fontSize = '15px';
        modeText.style.lineHeight = '30px';
        modeText.style.fontWeight = '600';
        
        controlUI.appendChild(modeText);
        divHolder.appendChild(controlUI);
        divHolder.addEventListener("click", centerMap);
      }
      
      var centerDiv = document.createElement('div');
      centerDiv.id = 'center-btn';
      CenterControl(centerDiv);
      centerDiv.index = 1;
      map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(centerDiv);
      
      function ResetButtonControl(divHolder) {
        // Set CSS for the control border.
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = '#fff';
        controlUI.style.border = '2px solid #fff';
        controlUI.style.borderRadius = '3px';
        controlUI.style.cursor = 'pointer';
        controlUI.style.marginTop = '10px';
        controlUI.style.marginLeft = '10px';
        controlUI.title = 'Reset (Clear Map)';
        controlUI.style.padding = "2px";
        controlUI.style.textAlign = 'center';
        
        var modeText = document.createElement('div');
        modeText.innerHTML = 'Reset';
        modeText.style.color = 'rgb(25,25,25)';
        modeText.style.fontFamily = 'Roboto,Arial,sans-serif';
        modeText.style.fontSize = '15px';
        modeText.style.lineHeight = '30px';
        modeText.style.fontWeight = '600';
        
        controlUI.appendChild(modeText);
        divHolder.appendChild(controlUI);
        divHolder.addEventListener("click", resetMap);
      }
      
      var resetDiv = document.createElement('div');
      ResetButtonControl(resetDiv);
      resetDiv.index = 1;
      resetDiv.id = "reset-btn";
      map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(resetDiv);
      //********************************* End Custom Controls*********************************
    }
    
    function centerMap() {
      if(appArea == null) { return; }
      var center = appArea.getCentroid();
      if(center==null) { return; }
      map.setCenter(center);
    }
    
    function drawToggle(mode) {
      // Value defaults in string, parse the int value
      mode = parseInt(mode, 10);
      switch(mode) {
        case 0:
          drawingManager.setOptions({ drawingMode: null });
          break
        case 1: // Fall through
        case 2: // Fall through
        case 3:
          drawingManager.setOptions({ drawingMode: google.maps.drawing.OverlayType.POLYGON });
          drawModeControl.current=mode;
          break;
        default: break; // unexpected input
      }
    }
    
    function draw(path) {
      var mode = drawModeControl.getCurrent();
      switch(mode) {
        case "Application Area":
            if(appArea == null) { appArea = new AppArea(map,path); } 
            else { appArea.del(); appArea = new AppArea(map,path); }
          break
        case "Hazard":
            if(appArea==null) { console.log("No application area defined for hazard"); return; }
            appArea.addHazard(path);
          break;
        case "Variable Rate Area":
            if(appArea==null) { console.log("No application area defined for variate rate area"); return; }
            appArea.addVariableRate(path);
          break;
        default: break; // unexpected input
      }
      var success = validate();
      if(success) {
        // Update stat display
        var acres = appArea.getArea();
        acres = round(acres,3);
        document.getElementById('num-acres').value = acres;
        var bpa = document.getElementById('num-bugs-per-acre').value;
        var pm = document.getElementById('percent-multiplier').value;
        var totalBugs = appArea.getTotalBugs(bpa,pm);
        document.getElementById('num-bugs').value = round(totalBugs,0);
      } else {
        // Reset stat display
        document.getElementById('num-acres').value = 0;
        document.getElementById('num-bugs').value = 0;
      }
    }
    
    function resetMap() {
        if(appArea != null) { appArea.del(); }
        appArea = null;
        // Reset stat display
        document.getElementById('num-acres').value = 0;
        document.getElementById('num-bugs').value = 0;
    }

    function validate() {
        if(appArea==null) {console.log("App area was null");return false;}
        if(!appArea.validateAndFix()) {
            appArea==null;
            return false;
        }
        return true;
    }
    
    document.getElementById('additional-info').addEventListener("submit", function(event) {
      if(validate()) {
        // Prevent default submission (we are building ajax reques)
        event.preventDefault();
        
        // Create form data object to easily get form values
        var formData = new FormData(document.getElementById('additional-info'));
        
        var applicationArea = appArea.toEasyFormat();
        var data = {
          "appArea" : applicationArea,
          "acres" : formData.get('num-acres'),
          "bugsPerAcre" : formData.get('bugs-per-acre'),
          "variableRate": formData.get('percent-multiplier'),
          "numBugs" : formData.get('num-bugs'),
          "contactName" : formData.get('contact-name'),
          "contactPhone" : formData.get('contact-phone'),
          "contactEmail" : formData.get('contact-email'),
          "billingAdress" : formData.get('billing-address'),
          "crop" : formData.get('crop'),
          "rowSpacing" : formData.get('row-spacing')
        };
        
        // Ajax request
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
           console.log(this.responseText);
          }
        };
        xhttp.open("POST", "/", true);
        xhttp.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        xhttp.send(JSON.stringify(data));
      } else {
        event.preventDefault();
        console.log("Did not submit");
      }
      
    });
  </script>
