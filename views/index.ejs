  <!DOCTYPE html>
  <html>
    <head>
      <title>Parabug Estimate Solution Tool</title>
      <meta name="viewport" content="initial-scale=1.0">
      <meta charset="utf-8">
      <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCVb91QSKklhit9A4DwFJuP8lcb00OEw_I&callback=initMap&libraries=drawing,places" defer> </script>
      <style>


        html {
          height: 100%;
          margin: 0px;
          padding: 0px;
        }
        
        body {
          height: 100%;
          margin: 0px;
          padding: 0px;
          display: grid;
          grid-template-rows: 80%;
        }
        
        .map-container {
          padding: 15px;
        }
        
        .sidebar {
          padding: 10px;
        }
        
        #add-bug-display {
          display: none;
        }
        
        /* Move reset button above google logo */
        #reset-btn {
          position: absolute;
          margin-left: -72px;
          margin-bottom: 85px;
        }
        
        /* Move center button above google logo */
        #center-btn {
          position: absolute;
          margin-left: -76px;
          margin-bottom: 25px;
        }
        
        #map {
          height: 100%;
          border: 2px solid black;
        }
        
        #pac-input {
          background-color: #fff;
          font-family: Roboto;
          font-size: 15px;
          font-weight: 300;
          margin-left: 10px;
          margin-top: 10px;
          padding: 0 11px 0 13px;
          text-overflow: ellipsis;
          width: 15%;
          line-height: 32px;
          border:'2px solid #fff';
        }
        
        #pac-input:focus {
          border-color: #4d90fe;
        }
        
        #mode-control-container {
          display: grid;
          grid-template-columns: 30% 70%;
          grid-template-rows: 100%;
        }
        
        #additional-info {
          font-family: Roboto;
          font-size: 15px;
          font-weight: 400;
          line-height: 32px;
        }
        
        #stat-display {
          text-align: center;
          margin: -11px 15px 0px 15px;
          padding: 10px 0px 10px 0px;
          /*background-color: grey;*/
        }
        
        .stat-item {
          display: inline-block;
        }
        
        .stat-text {
          display: inline-block;
          min-width: 80px;
          margin: 5px;
          text-align: right;
        }
        
        .stat-input {
          display: inline-block;
          min-width: 140px;
          margin: 5px;
        }
        
        .stat-input-checkbox {
          display: inline-block;
          min-width: 140px;
          margin: 5px;
          vertical-align: middle;
          text-align: left;
        }
        
        /* Read only inputs */
        .read-only {
          background-color: lightgrey;
        }
        
        #user-info-display {
          margin: 0px 15px 0px 15px;
          padding: 10px;
          /*background-color: lightblue;*/
          text-align: center;
        }
        
        #user-info-display>h2 {
          margin-bottom: 5px;
        }
        
        .form-element {
          margin-top: 10px;
          vertical-align: middle;
        }
        
        .form-text {
          display: inline-block;
          min-width: 120px;
          vertical-align: middle;
        }
        
        .form-input {
          display: inline-block;
          line-height: 40px;
          vertical-align: middle;
        }
        
        .align-input {
            display: inline-block;
            text-align: left;
        }
        
        #crosshair-center {
          vertical-align: center;
          text-align: center;
          display: none;
        }
        
        #mobile-div {
          display: inline-block;
          background-color: #fff;
          border: 2px solid #fff;
          border-radius: 3px;
          cursor: pointer;
          text-align: center;
          vertical-align: center;
          font-family: Roboto,Arial,sans-serif;
          font-size: 15px;
          padding:2px;
          margin-bottom: 12px;
        }
        #mobile-mode-div {
          display: inline-block;
        }
        #mobile-options-div {
          display: none;
        }

        hr {
          border: none;
        }
        
      </style>
    </head>
    <body>
      <div class="map-container">
        <input id="pac-input" class="controls" type="text" placeholder="Search...">
        <div id="map"></div>
      </div>
    </body>
    <form id="additional-info" method="POST">
      <div id="stat-display">
        <!--Bug Name-->
        <div class="stat-item">
          <label class="stat-text" for="bug-name" title="Bug Indicator">Bug:</label>
          <div class="stat-input"><input type="text" name="bug-name" id="bug-name"/></div>
        </div>
        <!--Bugs Per Acre-->
        <div class="stat-item">
          <label class="stat-text" for="num-bugs-per-acre" title="Bugs per acre in the application area">Bugs / Acre:</label>
          <div class="stat-input"><input type="number" name="bugs-per-acre" id="num-bugs-per-acre" min="1" value="10000" required/></div>
        </div>
        <!--Variable Rate-->
        <div class="stat-item">
          <label class="stat-text" for="variable-rate" title="Bugs per acre in variable rate areas">Variable Rate:</label>
          <div class="stat-input"><input type="number" name="variable-rate" id="variable-rate" value="20000" min="1" required/></div>
        </div>
        
        <hr/>
        <div id="add-bug-display">
          <!--Bug Name 2-->
          <div class="stat-item">
            <label class="stat-text" for="bug-name2" title="Bug Indicator">Bug 2:</label>
            <div class="stat-input"><input type="text" name="bug-name2" id="bug-name2"/></div>
          </div>
          <!--Bugs Per Acre 2-->
          <div class="stat-item">
            <label class="stat-text" for="num-bugs-per-acre2" title="Bugs per acre in the application area">Bugs / Acre 2:</label>
            <div class="stat-input"><input type="number" name="bugs-per-acre2" id="num-bugs-per-acre2" min="1" value="10000" required/></div>
          </div>
          <!--Variable Rate 2-->
          <div class="stat-item">
            <label class="stat-text" for="variable-rate2" title="Bugs per acre in variable rate areas">Variable Rate 2:</label>
            <div class="stat-input"><input type="number" name="variable-rate2" id="variable-rate2" value="20000" min="1" required/></div>
          </div>
        </div>
        <hr/>
        <!--Estimated Number of Acres-->
        <div class="stat-item">
          <label class="stat-text" for="num-acres" title="Estimated number acres = application area - sum(hazard areas)">Acres:</label>
          <div class="stat-input"><input type="number" name="num-acres" id="num-acres" class="read-only" value="0" readonly/></div>
        </div>
        <!--Estimated Total Bugs-->
        <div class="stat-item">
          <label class="stat-text" for="num-bugs" title="Estimated total number of bugs">Total Bugs:</label>
          <div class="stat-input"><input type="number" name="num-bugs" id="num-bugs" class="read-only" value="0" readonly/></div>
        </div>
        
        <div class="stat-item">
          <label class="stat-text" for="add-bug-toggle" title="Toggle between 1 and 2 bugs for application">Add Bug:</label>
          <div class="stat-input-checkbox"><input type="checkbox" name="add-bug-toggle" id="add-bug-toggle" value="add-bug"/></div>
        </div>
      </div>
      
      <div id="mobile-div">
        <div id="mobile-mode-div">
          <label for="mobile-mode">Crosshair</label>
          <input type="checkbox" value="mobile" id="mobile-mode" name="mobile-mode">
        </div>
        <div id="mobile-options-div">
          <input type="button" value="Mark / Select" onClick="makeMarker()"/>
          <input type="button" value="Finish" onClick="finishShape()"/>
        </div>
      </div>
      
      <div id="user-info-display">
        <img id="logo-img" src="/img/logo-sml.jpg"/>
        <h2>User Information</h2>
        <div class="align-input">
          <!--Contact Name-->
          <div class="form-element">
            <div class="form-text">Contact Name:</div>
            <div class="form-input"><input type="text" name="contact_name" id="contact-name"  size="60" required/></div>
          </div>
          <!--Contact Phone-->
          <div class="form-element">
            <div class="form-text">Contact Phone:</div>
            <div class="form-input"><input type="text" name="contact_phone" id="contact-phone"  size="60" required/></div>
          </div>
          <!--Contact Email-->
          <div class="form-element">
            <div class="form-text">Contact Email:</div>
            <div class="form-input"><input type="text" name="contact_email" id="contact-email"  size="60" required/></div>
          </div>
          <!--Billing Address-->
          <div class="form-element">
            <div class="form-text">Billing Address:</div>
            <div class="form-input"><input type="text" name="billing_address" id="billing-address"  size="60" required/></div>
          </div>
          <!--Crop-->
          <div class="form-element">
            <label class="form-text" for="crop">Crop:</label>
            <div class="form-input"><input type="text" name="crop" id="crop"  size="60" required/></div>
          </div>
          <!--Row Spacing-->
          <div class="form-element">
            <label class="form-text" for="row-spacing">Row Spacing (ft):</label>
            <div class="form-input"><input type="number" name="row_spacing" id="row-spacing" required/></div>
          </div>
          <div class="form-element">
            <label class="form-text" for="notes">Notes:</label>
            <div class="form-input"><textarea name="notes" id="notes" rows="3" cols="60"></textarea></div>
          </div>
        </div>
        <div class="form-element" id = "submitRequest">
          <div class="form-input"><input type="submit" value="Submit Request"></div>
        </div>
      </div>
    </form>
  </html>
  
  <!--<script src="https://cdn.rawgit.com/bjornharrtell/jsts/gh-pages/1.6.0/jsts.min.js"></script>-->
  <script type="text/javascript" src="/js/jsts.1.6.1.js"></script>
  <script type="text/javascript" src="/js/classes.js"></script>
 <script src="//code.jquery.com/jquery-3.3.1.min.js"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet"/>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
  <script>
    // GLOBAL VARIABLES
    var map;
    var drawingManager;
    var appArea;
    var infoWindow;
    var centerMarker;
    var overlayMarkers = [];
    var tempShape;
    
    
    // Internal object to help manage toggling between our custom
    //  drawing modes
    var drawModeControl = {
      modes: ['Drag', 'Application Area', 'Hazard', 'Variable Rate Area', 'Delete'],
      hoverText: [
        'Drag map view', 
        'Create an application area. \n- Redrawing will reset map.',
        'Create a hazard area. \n- Application area must exist to create hazard areas.',
        'Create a variable rate area. \n- Application area must exist to create variable rate areas. \n- Variable rate areas do not overlap with hazard areas.',
        'Delete selection tool for deleting application areas, hazard areas, and variable rate areas.'
        ],
      current: 0,
      getCurrent: function(){ return this.modes[this.current]; }
    };
    

    function initMap() {
      map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: 36.677756, lng: -121.729448}, // default
        zoom: 15,
        mapTypeId: 'satellite',
        streetViewControl: false,
        rotateControl: false,
        mapTypeControlOptions: {
          style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,
        }
      });
      
      
      var image = {
        url: "/img/crosshair.png",
        size: new google.maps.Size(200,200),
        origin: new google.maps.Point(0,0),
        anchor: new google.maps.Point(100,100)
      }
      
      centerMarker = new google.maps.Marker({
        position: map.getCenter(),
        icon: image,
        draggable: true,
        // map: map,
        zIndex: 3
      });
  
      drawingManager = new google.maps.drawing.DrawingManager({
        drawingMode: null,
        drawingControl: false,
        map: map,
        polygonOptions: { editable: true }
      });
      
      google.maps.event.addListener(drawingManager, 'polygoncomplete', function(p) {
        draw(p.getPath());
        p.setMap(null);
        path = null;
      });

      map.setTilt(0);
      
      //*********************************** User Location ************************************
      // Try HTML5 geolocation.
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          map.setCenter(pos);
          map.setZoom(15);
          centerMarker.setPosition(pos);
        }, function() {
          handleLocationError(true);
        });
      } else {
        // Browser doesn't support Geolocation
        handleLocationError(false);
      }
      //********************************* End User Location **********************************
      
      //************************************* Search Box *************************************
      // Create the search box and link it to the UI element.
      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
      
      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function() {
        searchBox.setBounds(map.getBounds());
      });
      
      // Listen for the event fired when the user selects a prediction
      searchBox.addListener('places_changed', function() {
        var places = searchBox.getPlaces();
        if (places.length == 0) { return; }
        
        // For each place, get the location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function(place) {
          if (!place.geometry) { console.log("Returned place contains no geometry"); return; }
          
          // Only geocodes have viewport
          if (place.geometry.viewport) { bounds.union(place.geometry.viewport); } 
          else { bounds.extend(place.geometry.location); }
        });
        map.fitBounds(bounds);
        map.setTilt(0);
      });
      //*********************************** End search Box ***********************************
      
      
      //*********************************** Custom Controls***********************************
      //https://developers.google.com/maps/documentation/javascript/examples/control-custom
      function MapModeControl(divHolder) {
        // Set CSS for the control border.
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = '#fff';
        controlUI.style.border = '2px solid #fff';
        controlUI.style.borderRadius = '3px';
        controlUI.style.cursor = 'pointer';
        controlUI.style.marginTop = '10px';
        controlUI.style.padding = '2px';
        controlUI.title = 'Select Control Mode';
        controlUI.id = "mode-control-container";
        
        var modeText = document.createElement('div');
        modeText.innerHTML = 'Mode: ';
        modeText.style.color = 'rgb(25,25,25)';
        modeText.style.fontFamily = 'Roboto,Arial,sans-serif';
        modeText.style.fontSize = '15px';
        modeText.style.lineHeight = '30px';
        modeText.style.marginRight = '10px';
        modeText.style.fontWeight = '600';
        
        // Interior
        var modeSelect = document.createElement('select');
        modeSelect.style.color = 'rgb(25,25,25)';
        modeSelect.style.fontFamily = 'Roboto,Arial,sans-serif';
        modeSelect.style.fontSize = '15px';
        modeSelect.style.lineHeight = '30px';
        
        var mode;
        for(var i = 0; i < drawModeControl.modes.length; i++) {
          mode = document.createElement('option');
          mode.value = i;
          mode.text = drawModeControl.modes[i];
          mode.title = drawModeControl.hoverText[i];
          modeSelect.appendChild(mode);
        }
        modeSelect.addEventListener('change', function() {
          var index = modeSelect.selectedIndex;
          var value = modeSelect.options[index].value;
          drawToggle(value);
        });
        
        controlUI.appendChild(modeText);
        controlUI.appendChild(modeSelect);
        divHolder.appendChild(controlUI);
      }
      
      var modeSelectionDiv = document.createElement('div');
      MapModeControl(modeSelectionDiv);
      modeSelectionDiv.index = 1;
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelectionDiv);
      
      function CenterControl(divHolder) {
        // Set CSS for the control border.
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = '#fff';
        controlUI.style.border = '2px solid #fff';
        controlUI.style.borderRadius = '3px';
        controlUI.style.cursor = 'pointer';
        controlUI.style.margin = '10px';
        controlUI.title = 'Center Map on Application Area';
        controlUI.style.padding = "2px";
        controlUI.style.textAlign = 'center';
        
        var modeText = document.createElement('div');
        modeText.innerHTML = 'Center';
        modeText.style.color = 'rgb(25,25,25)';
        modeText.style.fontFamily = 'Roboto,Arial,sans-serif';
        modeText.style.fontSize = '15px';
        modeText.style.lineHeight = '30px';
        modeText.style.fontWeight = '600';
        
        controlUI.appendChild(modeText);
        divHolder.appendChild(controlUI);
        divHolder.addEventListener("click", centerMap);
      }
      
      var centerDiv = document.createElement('div');
      centerDiv.id = 'center-btn';
      CenterControl(centerDiv);
      centerDiv.index = 1;
      map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(centerDiv);
      
      function ResetButtonControl(divHolder) {
        // Set CSS for the control border.
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = '#fff';
        controlUI.style.border = '2px solid #fff';
        controlUI.style.borderRadius = '3px';
        controlUI.style.cursor = 'pointer';
        controlUI.style.marginTop = '10px';
        controlUI.style.marginLeft = '10px';
        controlUI.title = 'Reset (Clear Map)';
        controlUI.style.padding = "2px";
        controlUI.style.textAlign = 'center';
        
        var modeText = document.createElement('div');
        modeText.innerHTML = 'Reset';
        modeText.style.color = 'rgb(25,25,25)';
        modeText.style.fontFamily = 'Roboto,Arial,sans-serif';
        modeText.style.fontSize = '15px';
        modeText.style.lineHeight = '30px';
        modeText.style.fontWeight = '600';
        
        controlUI.appendChild(modeText);
        divHolder.appendChild(controlUI);
        divHolder.addEventListener("click", resetMap);
      }
      
      var resetDiv = document.createElement('div');
      ResetButtonControl(resetDiv);
      resetDiv.index = 1;
      resetDiv.id = "reset-btn";
      map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(resetDiv);
      
      var mobileControl = document.getElementById('mobile-div');
      mobileControl.index = 1;
      map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(mobileControl);
      //********************************* End Custom Controls*********************************
    }
    
    function handleLocationError(browserHasGeolocation) {
      var message = (browserHasGeolocation ?
        'Error: The Geolocation service failed.' :
        'Error: Your browser doesn\'t support geolocation.');
      console.log(message);
    }
    
    function centerMap() {
      if(appArea == null) { return; }
      var center = appArea.getCentroid();
      if(center==null) { return; }
      map.setCenter(center);
    }
    
    function drawToggle(mode) {
      if(appArea != null) { appArea.resetGlobals(); }
      
      // Value defaults in string, parse the int value
      mode = parseInt(mode, 10);
      switch(mode) {
        case 4:
        case 0:
          drawingManager.setOptions({ drawingMode: null });
          drawModeControl.current=mode;
          break
        case 1: // Fall through
        case 2: // Fall through
        case 3:
          if(document.getElementById('mobile-mode').checked) {
            drawingManager.setOptions({ drawingMode: null });
          } else {
            drawingManager.setOptions({ drawingMode: google.maps.drawing.OverlayType.POLYGON });
          }
          drawModeControl.current=mode;
          break;
        default: break; // unexpected input
      }
    }
    
    function draw(path) {
      var mode = drawModeControl.getCurrent();
      switch(mode) {
        case "Application Area":
            if(appArea == null) { appArea = new AppArea(map,path); } 
            else { appArea.del(); appArea = new AppArea(map,path); }
          break
        case "Hazard":
            if(appArea==null) { console.log("No application area defined for hazard"); return; }
            appArea.addHazard(path);
          break;
        case "Variable Rate Area":
            if(appArea==null) { console.log("No application area defined for variate rate area"); return; }
            appArea.addVariableRate(path);
          break;
        default: break; // unexpected input
      }
      var success = validate();
      updateStats();
    }
    
    function resetMap() {
        if(appArea != null) { appArea.del(); }
        appArea = null;
        // Reset stat display
        document.getElementById('num-acres').value = 0;
        document.getElementById('num-bugs').value = 0;
    }

    function updateStats() {
      try {
        if(appArea != null) {
          // Update stat display
          var acres = appArea.getAdjustedArea();
          acres = round(acres,3);
          document.getElementById('num-acres').value = acres;
          var bpa = document.getElementById('num-bugs-per-acre').value;
          var vr = document.getElementById('variable-rate').value;
          var totalBugs = appArea.getTotalBugs(bpa,vr);
          
          if(document.getElementById('add-bug-toggle').checked) {
            var bpa2 = document.getElementById('num-bugs-per-acre2').value;
            var vr2 = document.getElementById('variable-rate2').value;
            totalBugs += appArea.getTotalBugs(bpa2,vr2);
          }
          
          document.getElementById('num-bugs').value = round(totalBugs,0);
        } else {
          document.getElementById('num-acres').value = 0;
          document.getElementById('num-bugs').value = 0;
        }
      } catch (e) {
        document.getElementById('num-acres').value = 0;
        document.getElementById('num-bugs').value = 0;
      }
    }

    function validate() {
        if(appArea==null) {console.log("App area was null");return false;}
        if(!appArea.validateAndFix()) {
            appArea==null;
            return false;
        }
        return true;
    }
    
    
    // Make text boxes responsive to user input (update the stats)
    var bugsPerAcre = document.getElementById('num-bugs-per-acre');
    bugsPerAcre.addEventListener('change', updateStats);
    bugsPerAcre.addEventListener('paste', updateStats);
    bugsPerAcre.addEventListener('input', updateStats);
    
    var percentMultiplier = document.getElementById('variable-rate');
    percentMultiplier.addEventListener('change', updateStats);
    percentMultiplier.addEventListener('paste', updateStats);
    percentMultiplier.addEventListener('input', updateStats);



    toastr.options.positionClass = "toast-top-center";
    document.getElementById('additional-info').addEventListener("submit", function(event) {
      if(validate()) {
          //toastr.optionsOverride({progressBar: 'true'});
          toastr.info("Processing...");
        // Prevent default submission (we are building ajax requests)
        event.preventDefault();
        
        // Create form data object to easily get form values
        var formData = new FormData(document.getElementById('additional-info'));
        
        var applicationArea = appArea.toEasyFormat();
        var data = {
          "appArea" : applicationArea,
          "appAcres" : appArea.getArea(),
          "hazardAcres" : appArea.getHazardArea(),
          "vraAcres" : appArea.getVRAArea(),
          "bugName" : formData.get('bug-name'),
          "bugsPerAcre" : formData.get('bugs-per-acre'),
          "variableRate": formData.get('variable-rate'),
          "numBugs" : formData.get('num-bugs'),
          "contactName" : formData.get('contact_name'),
          "contactPhone" : formData.get('contact_phone'),
          "contactEmail" : formData.get('contact_email'),
          "billingAdress" : formData.get('billing_address'),
          "crop" : formData.get('crop'),
          "rowSpacing" : formData.get('row_spacing'),
          "notes": formData.get('notes'),
          "bugName2": formData.get('bug-name2'),
          "bugsPerAcre2" : formData.get('bugs-per-acre2'),
          "variableRate2" : formData.get('variable-rate2')
        };
        
        if(document.getElementById('add-bug-toggle').checked) {
          data.bugName2 = formData.get('bug-name2');
          data.bugsPerAcre2 = formData.get('bugs-per-acre2');
          data.variableRate2 = formData.get('variable-rate2');
        }
        
        // Check bug names for empty strings?
        
        // Ajax request
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
           var message = this.responseText;
            showAlert(message);
          }
        };
        xhttp.open("POST", "/", true);
        xhttp.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        xhttp.send(JSON.stringify(data));
      } else {
        event.preventDefault();
        console.log("Did not submit");
      }
      
    });
    
    function showAlert(json){
      var message = JSON.parse(json);
      
      if(message.alertMessage === "Success"){
          toastr.success("Request Complete!");
      } else if (message.alertMessage === "invalid"){
          toastr.warning("Please Fill Out the Map Application Area.")
      } else {
          toastr.error("Request Failed. Please Try Again.");
      }
    }
    
    function makeMarker() {
      if(drawModeControl.current == 4) { // Delete Mode
        mobileClickSubPoly(centerMarker.getPosition());
        return;
      }
      if(drawModeControl.current == 0) { // Drag Mode
        alert("Select a mode.");
        return; 
      } 
      
      overlayMarkers.push(centerMarker.getPosition());
      if(tempShape!=null) { tempShape.setMap(null); }
      if(overlayMarkers.length == 1) {
        tempShape = new google.maps.Marker({
          position: centerMarker.getPosition(),
          icon: {
            path: google.maps.SymbolPath.CIRCLE,
            scale: 6,
            fillColor: 'white',
            fillOpacity: 1,
            strokeColor: 'black',
            strokeWeight: 2
          },
          map: map
        });
        return;
      }
      
      // If more than one marker, generate a polyline
      tempShape = new google.maps.Polyline({
            path: overlayMarkers,
            strokeColor: '#000000',
            strokeOpacity: 1,
            strokeWeight: 3,
            draggable: true,
            geodesic: true
        });
        tempShape.setMap(map);
    }
    
    function mobileClickSubPoly(latLng) {
      if(appArea==null) { return; }
      // Mobile delete selection fix
      var temp;
      for(var i = 0; i < appArea.getNumHazard(); i++) {
        temp = appArea.getHazard(i).getPoly();
        if(google.maps.geometry.poly.containsLocation(latLng, temp)) {
          var mev = {
            stop: null,
            latLng: latLng
          }
          google.maps.event.trigger(temp, 'click', mev);
          return;
        }
      }
      for(i = 0; i < appArea.getNumVariableRateAreas(); i++) {
        temp = appArea.getVariableRateArea(i).getPoly();
        if(google.maps.geometry.poly.containsLocation(latLng, temp)) {
          var mev = {
            stop: null,
            latLng: latLng
          }
          google.maps.event.trigger(temp, 'click', mev);
          return;
        }
      }
      console.log("No subpoly contained spot");
    }
    
    function finishShape() {
      if(tempShape != null) {
        draw(tempShape.getPath());
        tempShape.setMap(null);
      }
      overlayMarkers = [];
      tempShape = null;
    }
    
    document.getElementById('mobile-mode').addEventListener('click', function() {
      if(this.checked) {
        drawingManager.setOptions({ drawingMode: null });
        centerMarker.setPosition(map.getCenter());
        centerMarker.setMap(map);
        document.getElementById('mobile-options-div').style.display = "inline-block";
      } else {
        drawToggle(drawModeControl.current);
        centerMarker.setMap(null);
        document.getElementById('mobile-options-div').style.display = "none";
      }
    });
    
    document.getElementById('add-bug-toggle').addEventListener('click', function() {
      updateStats();
      if(this.checked) {
        document.getElementById('add-bug-display').style.display = "inline-block";
      } else {
        document.getElementById('add-bug-display').style.display = "none";
      }
    });
    
  </script>
